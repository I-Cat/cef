// Copyright (c) 2020 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8fc6bd335c560c3f9e901058c96a98968ac6ee7e$
//

#include "libcef_dll/cpptoc/power_policy_controller_cpptoc.h"
#include "libcef_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int CEF_CALLBACK power_policy_controller_add_system_wake_lock(
    struct _cef_power_policy_controller_t* self,
    cef_wake_lock_reason_t reason,
    const cef_string_t* description) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: description; type: string_byref_const
  DCHECK(description);
  if (!description)
    return 0;

  // Execute
  int _retval = CefPowerPolicyControllerCppToC::Get(self)->AddSystemWakeLock(
      reason, CefString(description));

  // Return type: simple
  return _retval;
}

int CEF_CALLBACK power_policy_controller_add_screen_wake_lock(
    struct _cef_power_policy_controller_t* self,
    cef_wake_lock_reason_t reason,
    const cef_string_t* description) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: description; type: string_byref_const
  DCHECK(description);
  if (!description)
    return 0;

  // Execute
  int _retval = CefPowerPolicyControllerCppToC::Get(self)->AddScreenWakeLock(
      reason, CefString(description));

  // Return type: simple
  return _retval;
}

int CEF_CALLBACK power_policy_controller_add_dim_wake_lock(
    struct _cef_power_policy_controller_t* self,
    cef_wake_lock_reason_t reason,
    const cef_string_t* description) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: description; type: string_byref_const
  DCHECK(description);
  if (!description)
    return 0;

  // Execute
  int _retval = CefPowerPolicyControllerCppToC::Get(self)->AddDimWakeLock(
      reason, CefString(description));

  // Return type: simple
  return _retval;
}

void CEF_CALLBACK power_policy_controller_remove_wake_lock(
    struct _cef_power_policy_controller_t* self,
    int block_id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefPowerPolicyControllerCppToC::Get(self)->RemoveWakeLock(block_id);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

CefPowerPolicyControllerCppToC::CefPowerPolicyControllerCppToC() {
  GetStruct()->add_system_wake_lock =
      power_policy_controller_add_system_wake_lock;
  GetStruct()->add_screen_wake_lock =
      power_policy_controller_add_screen_wake_lock;
  GetStruct()->add_dim_wake_lock = power_policy_controller_add_dim_wake_lock;
  GetStruct()->remove_wake_lock = power_policy_controller_remove_wake_lock;
}

// DESTRUCTOR - Do not edit by hand.

CefPowerPolicyControllerCppToC::~CefPowerPolicyControllerCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
CefRefPtr<CefPowerPolicyController> CefCppToCRefCounted<
    CefPowerPolicyControllerCppToC,
    CefPowerPolicyController,
    cef_power_policy_controller_t>::UnwrapDerived(CefWrapperType type,
                                                  cef_power_policy_controller_t*
                                                      s) {
  NOTREACHED() << "Unexpected class type: " << type;
  return nullptr;
}

template <>
CefWrapperType
    CefCppToCRefCounted<CefPowerPolicyControllerCppToC,
                        CefPowerPolicyController,
                        cef_power_policy_controller_t>::kWrapperType =
        WT_POWER_POLICY_CONTROLLER;
